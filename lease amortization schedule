from datetime import datetime
from dateutil import relativedelta
import calendar
import numpy_financial as npf
import pandas as pd

# 기본 정보
site_name  = 'Branch'
start_date = datetime(2021, 10, 12)
end_date   = datetime(2026, 10, 11)

monthly_rent = 1337.5

fetch_brate = True
#fetch_brate = False

description = 'Duo Residences #08-04'

# 현장 매핑
site = {
    'Branch' : '3D480',
    'Woodlands' : 'OAAT1',
    'J109'  : 'OCAS1',
    'CR108' : 'OCBA1'
}

# 리스 기간 구하기
lease_term = relativedelta.relativedelta(end_date, start_date)
number_of_months = lease_term.months + (12 * lease_term.years) + 1
#print("총 리스기간은 " + str(number_of_months) + "개월 입니다.")

if fetch_brate:
    # 증분차입이자율 값 찾기
    folder = '/Users/hyeryounhong/Dropbox/02. 업무/3. 동남아시아지사/1. 싱가포르/013. 감사보고서/2020/4_Lease/할인율_본사/'
    rate_excel = 'valuation_통합.xlsx'

    df_rate = pd.read_excel(folder + rate_excel)

    finding_rate = df_rate[ (df_rate['년'] == start_date.year) & (df_rate['월'] == start_date.month) & (df_rate['개월'] == number_of_months) ]

    annual_borrowing_rate = float(finding_rate['할인율'])
else: 
    # 증분이자율 직접 입력하는 경우
    annual_borrowing_rate = 6.2

#print('할인율은 {} 입니다.'.format(annual_borrowing_rate))
monthly_borrowing_rate = annual_borrowing_rate / 100 / 12

# 현재 가치 구하기
pv_lease = round(npf.pv(monthly_borrowing_rate,
                        number_of_months,
                        -monthly_rent,
                        fv=0,
                        when='end'),2)

#pv_lease = 33087.63
#print("리스자산/부채의 현재가치는 " + str(pv_lease) + " 입니다.")

summary = pd.DataFrame(
    [[site.get(site_name), site_name, description, start_date.strftime('%Y-%m-%d'), end_date.strftime('%y-%m-%d'), number_of_months, annual_borrowing_rate/12]],
    columns = ['Code', 'Site', 'Description', 'Start', 'End', 'Period', 'Rate'],
    )

print(summary)
print('-' * 90)

# 스케줄 날짜
mm = 1
year  = start_date.year
month = start_date.month

dates = ['{}-{}-{}'.format(year, month, calendar.monthrange(year, month)[1])]

while mm < number_of_months:

    month = month + 1

    if month == 13:
        month = 1
        year  = year + 1
    
    dates.append(('{}-{}-{}'.format(year, month, calendar.monthrange(year, month)[1])))

    mm = mm + 1

df_dates = pd.DataFrame(dates)

# lease liability amortization
lease_liab_table = []

for i in range(0, number_of_months + 1):

    if i == 1:

        beg_balance = pv_lease
        interest = round((beg_balance * monthly_borrowing_rate),2)
        payment = monthly_rent
        end_balance = round((beg_balance + interest - payment),2)
        amrt = ([beg_balance, interest, payment, end_balance])
        lease_liab_table.append(amrt)

    elif 1 < i < number_of_months:
        
        beg_balance = end_balance
        interest = round((beg_balance * monthly_borrowing_rate),2)
        payment = monthly_rent
        end_balance = round((beg_balance + interest - payment),2)
        amrt = ([beg_balance, interest, payment, end_balance])
        lease_liab_table.append(amrt)
    
    elif i == number_of_months:

        beg_balance = end_balance
        interest = round((payment - beg_balance),2)
        payment = monthly_rent
        end_balance = 0
        amrt = ([beg_balance, interest, payment, end_balance])
        lease_liab_table.append(amrt)

lease_table = pd.DataFrame(lease_liab_table)

# 날짜와 상각표 합치기
df_lease_liab = pd.concat([df_dates, lease_table], axis = 1)
df_lease_liab.columns = ['Date', 'Beg. Liab', 'Interest', 'Payment', 'End. Liab']

# right-of-use asset
depreciation = round((pv_lease / number_of_months),2)

lease_asset_table = []

for j in range(0, number_of_months + 1):

    if j == 1:
        beg_balance = pv_lease
        end_balance = round((beg_balance - depreciation),2)
        dep = [beg_balance, depreciation, end_balance]
        lease_asset_table.append(dep)
    
    if 1 < j < number_of_months:
        beg_balance = end_balance
        end_balance = round((beg_balance - depreciation),2)
        dep = [beg_balance, depreciation, end_balance]
        lease_asset_table.append(dep)
    
    if j == number_of_months:
        beg_balance = end_balance
        end_balance = 0
        depreciation = beg_balance - end_balance
        dep = [beg_balance, depreciation, end_balance]
        lease_asset_table.append(dep)

df_lease_asset = pd.DataFrame(lease_asset_table)
df_lease_asset.columns = ['Beg.ROU', 'Depreciation', 'End.ROU']

result = pd.concat([df_lease_liab, df_lease_asset], axis=1)
print(result)
print('-' * 115)
# lease_table.to_excel("lease_amort_table.xlsx", index=False, header=False)

int_sum = 0
dep_sum = 0
pay_sum = 0

BegB = 0
EndB = 0

JournalEntry = []

## 일반 원장 출력
def PrintJE_General(year, pay_sum, int_sum, dep_sum, BegB = 0, EndB = 0):
    JournalEntry.append(['###' + str(year)])

    je_date = str(year)+'.12.31'

    if (BegB != 0):
        C_liab  = BegB - EndB
        NC_liab = BegB - C_liab

        JournalEntry.append([site.get(site_name), site_name, '12900001', 'Lease right asset', '-', je_date, je_date, '-', '-', '-', 'SGD', BegB, 0])
        JournalEntry.append([site.get(site_name), site_name, '21990001', 'Lease/Liabilities', '-', je_date, je_date, '-', '-', '-', 'SGD', 0, C_liab])
        
        if NC_liab != 0:
            JournalEntry.append([site.get(site_name), site_name, '22990001', 'Lease/Liabilities', '-', je_date, je_date, '-', '-', '-', 'SGD', 0, NC_liab]) 
    
    JournalEntry.append([site.get(site_name), site_name, '21990001', 'Lease/Liabilities', '-', je_date, je_date, '-', '-', '-', 'SGD', pay_sum - int_sum, 0])
    JournalEntry.append([site.get(site_name), site_name, '66151021', 'Financial expense -', '-', je_date, je_date, '-', '-', '-', 'SGD', int_sum, 0])
    JournalEntry.append([site.get(site_name), site_name, '53280001', 'Depreciation Expense', '-', je_date, je_date, '-', '-', '-', 'SGD', dep_sum, 0])
    JournalEntry.append([site.get(site_name), site_name, '53201851', 'Rental Expenses-leas', '-', je_date, je_date, '-', '-', '-', 'SGD', -pay_sum, 0])
    JournalEntry.append([site.get(site_name), site_name, '12910001', 'Lease right asset-Ac', '-', je_date, je_date, '-', '-', '-', 'SGD', 0, dep_sum])

## 비유동->유동으로 전환
def PrintJE_Transfer(year, pay_sum, int_sum):
    je_date = str(year)+'.12.31'

    JournalEntry.append([site.get(site_name), site_name, '21990001', 'Lease/Liabilities', '-', je_date, je_date, '-', '-', '-', 'SGD', 0, pay_sum - int_sum])
    JournalEntry.append([site.get(site_name), site_name, '22990001', 'Lease/Liabilities', '-', je_date, je_date, '-', '-', '-', 'SGD', pay_sum - int_sum, 0])

## 리스자산, 감가상각누계액 정리
def PrintJE_Final(year, BegB):
    je_date = str(year)+'.12.31'

    JournalEntry.append([site.get(site_name), site_name, '12900001', 'Lease right asset', '-', je_date, je_date, '-', '-', '-', 'SGD', 0, BegB])
    JournalEntry.append([site.get(site_name), site_name, '12910001', 'Lease right asset-Ac', '-', je_date, je_date, '-', '-', '-', 'SGD', BegB, 0])


## 1차년도 원장 값 구하기
for i in result.index:
    target_year = datetime.strptime(result['Date'][i], '%Y-%m-%d').year
    target_month = datetime.strptime(result['Date'][i], '%Y-%m-%d').month

    if target_year == start_date.year:
        if BegB == 0:
            BegB = result['Beg. Liab'][i]
        
        pay_sum += result['Payment'][i]
        int_sum += result['Interest'][i]
        dep_sum += result['Depreciation'][i]

    else:
        if target_year == (start_date.year + 1):
            EndB = result['End. Liab'][i]      

            if (target_month == 12) | (i == len(result) - 1):
                PrintJE_General((target_year - 1), pay_sum, int_sum, dep_sum, BegB, EndB)

                int_sum = dep_sum = pay_sum = 0
                BegB = EndB = 0

## n차년도 원장 값 구하기
for i in result.index:
    target_year  = datetime.strptime(result['Date'][i], '%Y-%m-%d').year
    target_month = datetime.strptime(result['Date'][i], '%Y-%m-%d').month

    if target_year > start_date.year:
        pay_sum += result['Payment'][i] 
        int_sum += result['Interest'][i]
        dep_sum += result['Depreciation'][i]

        if (target_month == 12) | (i == len(result) - 1):            
            if target_year != (start_date.year + 1):
                ## pay_sum, int_sum 은 차기년도 값 (예: 23년도분을 계산해서 22년도에 출력)
                PrintJE_Transfer((target_year - 1), pay_sum, int_sum)
            PrintJE_General(target_year, pay_sum, int_sum, dep_sum)

            int_sum = dep_sum = pay_sum = 0
            BegB = EndB = 0

    if (target_year == end_date.year):
        if i == len(result) - 1:
            PrintJE_Final(target_year, result['Beg. Liab'][0])

entries = pd.DataFrame(JournalEntry).fillna('')
print(entries)
